FORMAT: 1A
HOST:  https://eservant.quidinfo.it


# Core services

Microservizio che offre le funzionalità core di eServant.

# Group Events  

## /core/events 

### GET

Ritorna la lista di tutti gli eventi memorizzati nel sistema. 

+ Request (application/json)

+ Response 200 (application/json)

 + Attributes (CEEventListRes)
 

## /core/events/{id}

[***STABLE***]

### GET

Restituisce il dettaglio dell'evento corrispondente all' `id` passato.

Il parametro in input *necessario* è:
* `id`: identificativo dell'evento di cui si desidera visualizzare dettaglio.

Tra le informazioni del dettaglio evento si hanno:
* `isSpot`: (boolean, required) indica se evento è puntuale (cioè si manifesta isolatamente e non in modo ripetitivo);
* `aggregationFields`: (enum(string), required), indica delle proprietà caratterizzanti dell'evento, che permettono a FE di categorizzarlo.

+ Parameters
    + id (number, required) - identificativo dell'evento 

+ Request (application/json)
    + Parameters
        + id: 2
        
+ Response 200 (application/json)

    + Attributes (CEEventRes)

+ Response 500 (application/json)

 + Attributes (CE230Error)



## /core/events/{id}/users

### GET 

Ritorna la lista delle persone che partecipano ad un evento specifico (lista **""chi partecipa""**).


Il parametro *necessario* è:
* `id`: identificativo dell'evento del quale ci interessa sapere i partecipanti.


+ Parameters
    + id (number, required) - identificativo dell'evento
  
+ Request (application/json)
    + Parameters
        + id: 1
        
+ Response 200 (application/json)
   
   + Attributes (CEUserListInEventRes)

+ Response 500 (application/json)
    
   + Attributes (CEServerError)    


## /core/events/users/{username} 

[***STABLE***]
      
### GET 

Ritorna gli eventi correnti o futuri associati all'utente (lista **"I miei eventi"**).

Il parametro in input *necessario* è:
* `username`: identificativo dell'utente di cui si desidera visualizzare la lista de **"I miei eventi"**.

+ Parameters
    + username - username dell'utente di cui si intende reperire gli eventi 

+ Request (application/json)
    + Parameters
        + username: rossi.mario@gmail.com

+ Response 200 (application/json)

    + Attributes (CEEventUserListRes)

+ Response 500 (application/json)
    
    + Attributes (CE230Error)

## /core/events/suggestions

[***STABLE***]

### GET

Restituisce la lista dei ***primi 10*** eventi ordinati in base ad un algoritmo basato sull'importanza dell'evento.
I parametri in input *necessari*, in questo caso **filtri**, sono:
* `ShortName`: (string, optional) - nome dell'evento; 
* `EventAggregator`: (string, optional) - tipo di evento;
* `TimeFrom`: (string, optional) - ora di inizio dell'evento nel formato ISO-8601;
* `TimeTo`: (string, optional) - ora di fine dell'evento nel formato ISO-8601.

+ Attributes
    + ShortName: "Master in IoT" (string, optional) - nome dell'evento 
    + EventAggregator: "Corso di laurea" (string, optional) - tipo di evento
    + TimeFrom: `2018-10-01T08:30:00.603Z` (string, optional) - ora di inizio
    + TimeTo: `2018-10-12T15:30:00.603Z` (string, optional) - ora di fine

+ Response 200 (application/json)

    + Attributes (CESuggestedEventListRes)

+ Response 500 (application/json)

 + Attributes (CE230Error)

## /core/associate/events/{id}/users/{username}

[***STABLE***]

### PUT

Effettua operazione **aggiungi a "I miei Eventi"**; associa l'evento, il cui `id` è fornito in input, allo user, con `username` passato.
Ritorna i dati dell'evento appena associato. 


+ Parameters
    + id: 80677375 (number, required) - identificativo dell'evento che si intende associare all'utente
   
    + username: cj@quidinfo.it (string, required) - identificativo dell'utente che si intende 
                                                    associare all'evento
    
+ Request (application/json)

    + Parameters
        + username: cj@quidinfo.it 
        + id: 80677375
        
+ Response 200 (application/json)
    
     + Attributes (CEEventRes)

+ Response 500 (application/json)

 + Attributes (CE230Error)

## /core/share-events

[***STABLE***]

### PUT

 *Dopo confronto con Fabiano del 06 Marzo questa API non è attualmente usata al Front-end, in futuro forse lo sarà*

Effettua condivisione dell'evento `id` sul profilo social di un utente.

I parametri in input *necessari* sono:
* `id`: (number, required) identificativo dell'evento da condividere;
* `username`: (string, required) identificativo dello user sul cui social avverrà la condivisione;
* `socialName`: (string, required) nome del social su cui avrà luogo la condivisione; deve essere specificato nel **body** della richiesta. Può assumere i seguenti valori:
    * **FACEBOOK**;
    * **INSTAGRAM**.

+ Parameters
    + id: 80677375 (number, required) - identificativo dell'evento
   
    + username: cj@quidinfo.it (string, required) - identificativo dell'utente che esegue la 
                                                    condivisione
    + socialName: facebook (string, required)  - social su cui condividere                                              
                                                    
+ Request (application/json)

    + Parameters
        + username: cj@quidinfo.it 
        + id: 80677375
        + socialName: facebook

    + Attributes(CESocialNameReq)
    
+ Response 200 (application/json)
    
     + Attributes (CEEventRes)

+ Response 500 (application/json)

 + Attributes (CE230Error)

# Group Facilities

## /core/facilities

[***STABLE***]

### GET

Ritorna la lista di tutti gli impianti.

+ Response 200 (application/json)
  
    + Attributes (CEFacilityListRes)

+ Response 500 (application/json)

 + Attributes (CE230Error)


## /core/facilities/{id}

[***STABLE***]
      
### GET 

Ritorna il dettaglio della facility identificata da `id` in input.



+ Parameters
    + id - identificativo della facility che si necessita 

+ Request (application/json)
    + Parameters
        + id: 80677375

+ Response 200 (application/json)

    + Attributes (CEFacilityDetailRes)
        
+ Response 500 (application/json)

 + Attributes (CE230Error)

## /core/follow/facilities/{id}/users/{username}

[***STABLE***]

### PUT

Associa tutti gli eventi, attuali e futuri, della facility, corrispondente ad `id`,
allo user, specificato da `username`. Ritorna la lista degli eventi associati alla facility.

+ Parameters
    + id: 80677375 (number, required) - identificativo dell'impsianto che viene associato all'utente
   
    + username: cj@quidinfo.it (string, required) - identificativo dell'utente a cui l'impianto, 
                                                    cioè tutti i suoi eventi, viene associato
    
+ Request (application/json)
    + Parameters
        + username: cj@quidinfo.it 
        + id: 80677375

+ Response 200 (application/json)

    + Attributes (
    )
    
+ Response 500 (application/json)

 + Attributes (CE230Error)

# Group Agenda

## /core/agenda/events/{eventId}

### GET

Restituisce il programma di un evento in forma di **`agenda`**.

Il campo 'idEvent' nella request è obbligatoria.

L'`agenda` definisce un periodo, all'interno del quale sono presenti dei **`TimeSlot`**. E' possibile definire sotto-periodi "di eccezione" ad `agenda` e `TimeSlot`
definendo delle **exception** dello stesso tipo.

L'`agenda` è costituita da:
* **`startDate`** e **`endDate`** (string, required): Date di inizio e fine in formato ISO-8601. E' valorizzata solo la data e non l'orario
* **`timeSlots`**: lista di `TimeSlot` rappresentanti le attività svolte nel periodo dell'evento
  * **`TimeSlot`**: singola attività nel programma di un evento
    + `timeFrom`: 2017-04-14T08:21:45.484+0000 (string, required) - valorizzato solo l'orario
    + `timeTo`: 2017-04-14T08:23:45.484+0000 (string, required) - valorizzato solo l'orario
    + `dayOfWeek` (string, optional): indica uno timeSlot ricorrente. Valori possibili: `SU`, `MO`, `TU`, `WE`, `TH`, `FR`, `SA`
    + `shortName`: corso di cucina (string, required) - nome attività
    + `text`: corso di cucina giapponese,... (string, optional) - descrizione
    + `pic`: 648521f1-fe15-4408-b489-0cecbcd97e76.png (string, optional) - immagine attività
    + `exception` e `fatherId` (optional): indicano che il `TimeSlot` è una eccezione a un altro `TimeSlot`. `exception`, stringa, spiega l'eccezione, `fatherId` il `TimeSlot` a cui si applica l'eccezione
* `dayOfWeek` (string, optional): indica che l'agenda è ricorrenten
* `exception` e `fatherId` (optional): indicano che l'`agenda` è una eccezione al programma di un'altra `agenda`. `exception`, stringa, spiega l'eccezione, `fatherId` l'`agenda` a cui si applica l'eccezione. Sarà quindi presente una seconda agenda che avrà come `fatherId` il programma in cui va generata l'eccezione

+ Parameters
    + id: 24146414 (number, required) - identificativo del programma di evento che si necessita 

+ Request (application/json)
    + Parameters
        + idEvent: 24146414 (number, required)

+ Response 200 (application/json)

    + Attributes (CEAgendaRes)

+ Response 500 (application/json)

 + Attributes (CE230Error)

## /core/agenda/services/{eventId}

### GET

**TODO**: in definizione


# Group Services

## /core/services/

### GET

Restituisce i services generici.

Normalmente questi servizi sono tutti di categoria *HELP*.

+ Response 200 (application/json)
  
    + Attributes (CEServiceGenericSummaryListRes)

+ Response 500 (application/json)

 + Attributes (CE230Error)

## /core/services/{serviceId}

### GET

Restituisce informazioni dettagliate sul servizio corrispondente a `serviceId`.

Ogni servizio ha:
* una `privacy` associata, da 10 a 50 dove 10 rappresenta nessuna privacy e 50 massima privacy. Il servizio è fruibile solo se l'utente ha accettato un livello di privacy uguale o superiore a quello richiesto
* una `action` associata. I tipi di `action` si distinguono per la proprietà `command`, da cui derivano le proprietà `data` richieste:
   * **tel**, telefona
      + `shortName`: Carabinieri (string, required)
      + `command`: tel (string, required)
      + `data`: 
          + `phone`: 999 (string, required)
   * **sms**, invia sms con testo precompilato
      + `command`: sms (string, required)
      + `data`:
          + `phone`: 366654 (string, required)
          + `messaggio`: Ciao, sono al concerto di Gianni Morandi! (string, required)
   * **surf**, apri il browser su pagina web
      + `command`: surf (string, required)
      + `data`:
          + `url`: https://google.com (string, required)
   * **share**, share testo
      + `command`: share (string, required) 
      + `data`:
          + `text`: Covo dei Golosi via ponte a Giogoli Firenze (string, required)
          + `url`: https://google.com (string, optional)
   * **goto**, indicazioni su come raggiungere un servizio. Ritorna una url corrispondente ad una mappa ed, eventualmente, un warning nel caso sia richiesta la localizzazione del dispositivo (es. scannerizzando barcode)
      + `command`: goto (string, required) 
      + `data`:
          + `url`: http://eservant-sviluppo:8100/map/buildings/1 (string, required) url per richiedere la mappa con i POI da mostrare
* una `category` che rappresenta la categoria del servizio, i possibili valori saranno:
  * **MOBILITY**: se servizio legato alla mobilità;
  * **SECURITY**: se servizio legato alla sicurezza;
  * **FOOD**: se servizio legato alla vendita/consumo di prodotti alimentari.
  * **HELP**: se servizio di aiuto  [**solo lato BE**], lato FE questo si realizza gli HELP coincidono con i servizi, che hanno `isGeneric` impostato a true.
  
+ Parameters
    
    + serviceId: 82132332 (number, required) - identificativo del servizio di cui si cerca dettaglio

+ Response 200 (application/json)
   
    + Attributes (CEServiceDetailRes)

+ Response 500 (application/json)

 + Attributes (CE230Error)

## /core/services/events/{eventId}

### GET

Restituisce i servizi associati all'evento corrispondente a `eventId`. 

+ Parameters
    
    + eventId: 80677375 (number, required) - identificativo dell'evento a cui sono associati i servizi cercati


+ Response 200 (application/json)
   
    + Attributes (CEServiceSummaryListRes)

+ Response 500 (application/json)

 + Attributes (CE230Error)


# Group QR Position

## /core/set-qr-position

### POST

* Questo servizio viene usato quando occorre settare la posizione via qrcode.
* L'utente può quindi scansionare un QrCode inviando così una request al server con i seguenti parametri:
  * **`poiId`**: id del Poi in cui è posto il QrCode
  * **`deviceToken`**: id del dispositivo che ha fatto la scansione del QrCode

+ Parameters
   + poiId (number,required) - identificativo del poi
   + deviceToken (string, required) - identificativo del telefono

+ Request (application/json)
    + Parameters
        + poiId (number, required) 
        + deviceToken (string, required)

+ Response 200 (application/json)
    
  + Attributes (CEPositionRes) 
  
+ Response 500 (application/json)
  
   + Attributes (CEServerError)


# Group IBeacon

## /core/ibeacons/device-identification/{deviceToken}


### POST 

* Questo servizio viene chiamato alla login per assegnare al device dell'utente la tripletta con i seguenti campi:
  * **uuid**: stringa alfanumerica, per ora cablata,
  * **major**: BigDecimal che rappresenta la categoria di device (es. 'SMARTPHONE', 'IBEACON',...),
  * **minor**: id incrementale che insieme al major rappresenta un unico device

+ Parameters
   + username (string, required) - identificativo dell'utente presente nel jwtToken
   + deviceToken (string, required) - identificativo del telefono
   
+ Request (application/json)
    + Parameters
        + username (string, required)
        + deviceToken (string, required) 
        
+ Response 200 (application/json)

  + Attributes (CETriplettaRes)
  
+ Response 500 (application/json)

  + Attributes (CEServerError)

# Group News  

## /core/news

### GET

Ritorna tutte le news presenti.

+ Request (application/json)

+ Response 200 (application/json)

 + Attributes (CENewsListRes)


## /core/news/{id}

### GET

Ritorna la news corrispondente all' `id` passato.

Se l'id passato non esiste ritorna un errore.

+ Parameters
    + id (number, required) - identificativo dell'evento 

+ Request (application/json)
    + Parameters
        + id: 2
        
+ Response 200 (application/json)

    + Attributes (NewsRes)

+ Response 500 (application/json)

 + Attributes (CE230Error)

 

## Data Structures

### CEEventReq
+ metadata (MessagesSuccess)
+ payload (EventShareReq)

### CEEventRes
+ metadata (MessagesSuccess)
+ payload (EventRes)

### CEEventListRes
+ metadata (MessagesSuccess)
+ payload (array[EventRes, EventRes1])

### CESuggestedEventListRes
+ metadata (MessagesSuccess)
+ payload (array[EventSuggested, EventSuggested1])

### CEEventUserListRes
+ metadata (MessagesSuccess)
+ payload (array[EventFacSummaryRes, EventFacSummaryRes1])

### CEFacilityRes
+ metadata (MessagesSuccess)
+ payload (FacilityRes)

### CEFacilityListRes
+ metadata (MessagesSuccess)
+ payload (array[FacilityRes, FacilityRes1])

### CEFacilityDetailRes
+ metadata (MessagesSuccess)
+ payload (FacilityDetailRes)

### CEAgendaRes
+ metadata (MessagesSuccess)
+ payload (array[AgendaRes])

### CEServiceGenericSummaryListRes
+ metadata (MessagesSuccess)
+ payload (array[ServiceGenericSummaryRes, ServiceGenericSummaryRes1])

### CEServiceSummaryListRes
+ metadata (MessagesSuccess)
+ payload (array[ServiceSummaryRes, ServiceSummaryRes1, ServiceSummaryRes2])

### CEServiceDetailRes
+ metadata (MessagesSuccess)
+ payload (ServiceDetailRes)

### CESocialNameReq
+ metadata (MessagesSuccess)
+ payload (SocialNameReq)

### CENewsListRes
+ metadata (MessagesSuccess)
+ payload (array[NewsRes, NewsRes1])

### CETriplettaRes
+ metadata (MessagesSuccess)
+ payload (TriplettaRes)

### CEUserListInEventRes
+ metadata (MessagesSuccess)
+ payload (array[ UsersFriendsInEventRes, UsersFriendsInEventRes])


### CEPositionRes
+ metadata (MessagesSuccess)
+ payload (PositionRes)

### MessagesSuccess
+ messages (array[string]) - Nessun messaggio di errore


### id1
+ id: 1 (number, required)

### id2
+ id: 2 (number, required)


### EventRes
+ id: 78869707 (number, required) - identificatore evento
+ shortName:  Corso di Master in IoT (string, required) - nome evento
+ smallPic: `648521f1-fe15-4408-b489-0cecbcd97e76.png` (string, optional) - uuid immagine (formato piccolo) evento in NAS (Network Attached Storage)
+ bigPic: `2431521f1-fe15-4408-b489-0cecbcd9773.png` (string, optional) - uuid immagine (formato grande) evento in NAS (Network Attached Storage)
+ text: Il corso ha lo scopo di introdurre gli studenti ai seguenti argomenti... (string, required) - descrizione dell'evento
+ isSpot: true (boolean, required) - indica se ha calendario finito (conferenza o concerto)
+ startTS: `2018-09-01T10:22:00.235+0000` (string, required) - data inizio evento (ridondata con Agenda)
+ endTS: `2020-07-22T13:30:00.235+0000` (string, required) - data fine evento (ridondata con Agenda)
+ facilityId: 12345678 (number, required) - id impianto
+ aggregationFields: (array[enum[string]], required) - aggregatori di eventi
    + Members
        + `VIVI_IL_PIN`
        + `UNIVERSITA'`

### EventRes1
+ id: 21345678 (number, required) - identificatore evento
+ shortName:  Vivi il PIN (string, required) - nome evento
+ smallPic: `648521f1-fe15-4408-b489-0cecbcd97e76.png` (string, optional) - uuid immagine (formato piccolo) evento in NAS (Network Attached Storage)
+ bigPic: `648521f1-fe15-4408-b489-0cecbcd9773.png` (string, optional) - uuid immagine (formato grande) evento in NAS (Network Attached Storage)
+ text: L'evento ha lo scopo di... (string, required) - descrizione dell'evento
+ isSpot: true (boolean, required) - indica se ha calendario finito (conferenza o concerto)
+ startTS: `2018-09-01T08:30:00.235+0000` (string, required) - data inizio evento (ridondata con Agenda)
+ endTS: `2019-07-22T18:00:00.235+0000` (string, required) - data fine evento (ridondata con Agenda)
+ facilityId: 12345678 (number, required) - id impianto
+ aggregationFields: (array[enum[string]], required) - aggregatori di eventi
    + Members
        + `VIVI_IL_PIN`

### EventSuggested
+ isFollow: true (boolean, required) - partecipazione dello user all'evento
+ event(EventRes) 

### EventSuggested1
+ isFollow: true (boolean, required) - partecipazione dello user all'evento 
+ event(EventRes1) 


### EventFacSummaryRes
+ id: 78869707 (number, required) - identificatore evento
+ shortName:  Corso di Master in IoT (string, required) - nome evento
+ smallPic: `648521f1-fe15-4408-b489-0cecbcd97e76.png` (string, optional) - uuid immagine (formato piccolo) evento in NAS (Network Attached Storage)
+ bigPic: `4b58bc09-8630-4a8f-ab10-3a230df72369.jpeg` (string, required) - uuid immagine (formato grande) evento in NAS (Network Attached Storage)
+ text: Il corso ha lo scopo di introdurre gli studenti ai seguenti argomenti... (string, required) - descrizione dell'evento
+ isSpot: true (boolean, required) - indica se ha calendario finito (conferenza o concerto)
+ startTS: `2018-09-01T10:22:43.235+0000` (string, required) - data inizio evento (ridondata con Agenda)
+ facility: (FacilitySummaryRes, required) - info riassuntive della facility

### EventFacSummaryRes1
+ id: 12345678 (number, required) - identificatore evento
+ shortName:  Vivi il PIN (string, required) - nome evento
+ smallPic: `648521f1-fe15-4408-b489-0cecbcd97e76.png` (string, optional) - uuid immagine (formato piccolo) evento in NAS (Network Attached Storage)
+ bigPic: `4b58bc09-8630-4a8f-ab10-3a230df72369.jpeg` (string, required) - uuid immagine (formato grande) evento in NAS (Network Attached Storage)
+ text: Il corso ha lo scopo di introdurre gli studenti ai seguenti argomenti... (string, required) - descrizione dell'evento
+ isSpot: true (boolean, required) - indica se ha calendario finito (conferenza o concerto)
+ startTS: `2018-09-01T10:22:43.235+0000` (string, required) - data inizio evento (ridondata con Agenda)
+ facility: (FacilitySummaryRes1, required) - info riassuntive della facility

### EventAggregatorRes
+ id : 12 (number, required)
+ type : sport (string, required)

### EventAggregatorRes1
+ id : 10 (number, required)
+ type : intrattenimento (string, required)


### EventShareReq
+ socialId: Facebook (string, required) - identificatore del social
+ id: 78869707 (number, required) - identificatore evento
+ shortName:  Corso di Master in IoT (string, required) - nome evento
+ smallPic: `6dffe2ad-5c8a-4065-af89-9ca3694a87c6.png` (string, optional) - uuid ad immagine piccola evento in NAS (Network Attached Storage)
+ bigPic: `846dfa1e-c5f8-44db-8410-cf4eb8d147ab.jpeg` (string, required) - uuid ad immagine grande evento in NAS (Network Attached Storage)
+ text: Il corso ha lo scopo di introdurre gli studenti ai seguenti argomenti... (string, required) - descrizione dell'evento
+ facilityId: 69298237 (number, required) - identificatore di impianto
+ isSpot: true (boolean, required) - booleano che indica se ha calendario finito (conferenza o concerto)
+ startTS: `2018-09-01T10:22:43.235Z` (string, required) - data inizio evento
+ calendarId: 50491071 (number, required) - identificatore del calendario dell'evento
+ eventType: educazione (string, required) - tipologia di evento
+ creationTS: `2018-09-01T10:22:43.235Z` (string, required) - data generazione evento

### PoiEvFacRes
+ id: 1 (number, required) - id Point Of Interest
+ shortName: Entrata 1 (string, required) - nome POI
+ text: Entrata nord-ovest (string, optional) - descrizione del POI
+ latitude: 23.2 (number, required) - latitudine
+ longitude: 635.2 (number, required) - longitudine
+ level: 2 (number, required) - piano 
+ isAccessible: true (boolean) - accessibilità per invalidi
+ isActive: true (boolean, required) - stato del POI (operativo o meno)
+ creationTS: `2018-11-05T19:04:15.735+0000` (string, required) - data di creazione del POI
+ poiType: 1232 (number, required) - tipologia di POI

### PoiEvFacRes1
+ id: 2 (number, required) - id Point Of Interest
+ shortName: Varco (string, required) - nome POI
+ text: Varco sud-est (string, optional) - descrizione del POI
+ latitude: 23.2 (number, required) - latitudine
+ longitude: 635.2 (number, required) - longitudine
+ level: 2 (number, required) - piano 
+ isAccessible: true (boolean) - accessibilità per invalidi
+ isActive: true (boolean, required) - stato del POI (operativo o meno)
+ creationTS: `2018-11-05T19:04:15.735+0000` (string, required) - data di creazione del POI
+ poiType: 1232 (number, required) - tipologia di POI



### TriplettaRes
+ uuid: 7da8f5d4-5993-4775-90ec-65c91d2dcaf9 (string, required) stringa alfanumerica, per ora cablata,
+ major: 1.00 (number, required) BigDecimal che rappresenta la categoria di device ,
+ minor: 1 (number,required) id incrementale che insieme al major rappresenta un unico device

### PositionRes
+ id: 378249 (number, required) - id del poi 
+ latitude: 27.3 (number, required) - latitudine
+ longitude: 35.564 (number, required) - longitudine
+ level: 1 (number, required) - piano o livello
+ deviceToken: 'fOIT6h15i7U:APA91bE90sn87vqvUQv2eMWcKA0z626Bz-ypCI-J_I5f3gWEIr7ISLqE1qZszSGWOcNF-EcO3yiCf5mWv6-S5sTBB4oa916lhpd_6oSFGDMo5UU-4LnXYFkAOR8bLDQdBp0a6EB8M3f0' (string, required) 
+ measureTS: `2018-11-05T19:04:15.735+0000` (string, required) - data di associazione utente-posizione


### FacilityRes
+ id: 80677375 (number, required) - identificativo dell'impianto
+ shortName: Stadio Artemio Franchi (string, required) - nome impianto
+ pic: `06d7767b-81ae-480b-849b-0340f9ae1918.jpeg` (string, required) - uuid ad immagine impianto in NAS (Network Attached Storage)
+ text: Stadio di Firenze (string, required) - descrizione dell'impianto
+ owner: Pippo (string, required) - intestatario dell'impianto
+ facilitiesAggregator: (array[enum[string]], required) - aggregatori di eventi
    + Members
        + `SPORT`
        + `MUSIC`

### FacilityRes1
+ id: 98765432 (number, required) - identificativo dell'impianto
+ shortName: PIN (string, required) - nome impianto
+ pic: `06d7767b-81ae-480b-849b-0340f9ae1918.jpeg` (string, required) - uuid ad immagine impianto in NAS (Network Attached Storage)
+ text: Polo universitario (string, required) - descrizione dell'impianto
+ owner: PIN (string, required) - intestatario dell'impianto
+ facilitiesAggregator: (array[enum[string]], required) - aggregatori di eventi
    + Members
rnate        + `MUSIC`

### FacilityDetailRes
+ id: 80677375 (number, required) - identificativo dell'impianto
+ shortName: Stadio Artemio Franchi (string, required) - nome impianto
+ pic: `06d7767b-81ae-480b-849b-0340f9ae1918.jpeg` (string, required) - uuid ad immagine impianto in NAS (Network Attached Storage)
+ text: stadio di Firenze (string, required) - descrizione dell'impianto
+ owner: Pippo (string, required) - intestatario dell'impianto
+ creationTS: `2018-09-01T10:22:43.235+0000` (string, required) - data generazione impianto
+ pof: (PofRes, required) - POI of facility, poi che coincide con sede legale della facility
+ pois (array[id1, id2]) 
+ facilitiesAggregator: (array[enum[string]], required) - aggregatori di eventi
    + Members
        + `SPORT`
        + `MUSIC`

### FacilityAggregatorRes_obsoleto
+ id: 1 (number, required) - identificativo dell'aggregatore
+ type: SPORT (string, required) - tipo dell'aggregatore

### FacilityAggregatorRes1_obsoleto
+ id: 2 (number, required) - identificativo dell'aggregatore
+ type: MUSIC (string, required) - tipo dell'aggregatore

### FacilitySummaryRes
+ id: 80677353 (number, required) - identificativo dell'impianto
+ shortName: Università degli studi di Firenze (string, required) - nome impianto

### FacilitySummaryRes1
+ id: 80677369 (number, required) - identificativo dell'impianto
+ shortName: PIN (string, required) - nome impianto


### PofRes
+ id: 3 (number, required) - id Point Of Facility
+ shortName: Sede legale (string, required) - nome POF
+ text: Indirizzo della sede legale  (string, optional) - descrizione del POF
+ latitude: 23.2 (number, required) - latitudine
+ longitude: 635.2 (number, required) - longitudine
+ level: 0 (number, required) - piano 
+ isAccessible: true (boolean) - accessibilità per invalidi
+ isActive: true (boolean, required) - stato del POF (operativo o meno)
+ creationTS: `2018-11-05T19:04:15.735+0000` (string, required) - data di creazione del POF
+ poiType: 1232 (number, required) - tipologia di POF


### AgendaRes 
+ id: 18869708 (number, required) - identificatore del programma
+ startDate: `2019-04-14T08:21:45.484+0000` (string, required) - data (no time) inizio evento ISO datetime
+ endDate: `2019-04-14T08:21:45.484+0000` (string, required) - data (no time) fine evento ISO datetime
+ timeSlots: (array[TimeSlotRes, TimeSlotRes1]) - time slot riferibili al calendario corrente


### AgendaExceptionRes 
+ id: 28869708 (number, required) - identificatore del programma
+ startDate: `2019-04-14T08:21:45.484+0000` (string, required) - data (no time) inizio evento ISO datetime
+ endDate: `2019-04-14T08:21:45.484+0000` (string, required) - data (no time) fine evento ISO datetime
+ exception: eccezione che cancella l'intero programma (string, required)
+ fatherId: 18869708 (number, required) - identificatore del programma su cui generare l'eccezione

### AgendaServiceRes 
+ id: 78869708 (number, required) - identificatore del programma
+ startDate: `2019-04-14T08:21:45.484+0000` (string, required) - data (no time) inizio evento ISO datetime
+ endDate: `2019-04-14T08:21:45.484+0000` (string, required) - data (no time) fine evento ISO datetime
+ dayOfWeek: MO (string, optional) valorizzato se evento ricorrente
+ exception: chiusura straordinaria (string, optional) - eventuale eccezione sul calendario
+ fatherId: 8492032 (number, optional) - id di una agenda da cui deriva questa. valorizzato sse valorizzata l'eccezione
+ timeSlots: (array[TimeSlotRes, TimeSlotRes1]) - time slot riferibili al calendario corrente



### TimeSlotRes
+ id: 78869708 (number, required) - timeSlot id
+ timeFrom: `2017-04-14T08:21:45.484+0000` (string, required) - ISO date-time di inizio timeSlot. Se dayOfWeek valorizzato considerare solo la parte time
+ timeTo: `2017-04-14T08:23:45.484+0000` (string, required) - ISO date-time di fine timeSlot. Se dayOfWeek valorizzato considerare solo la parte time
+ shortName: primo (string, required) - short name dello slot
+ text: `Fiorentina-Roma` (string, optional) - descrizione del timeSlot
+ pic: `37adab3a-c008-4fc1-9e72-cb28383a31d5.jpeg` (string, required) - uuid ad immagine

### TimeSlotRes1
+ id: 12345678 (number, required) - timeSlot id
+ fatherId: 78869708 (number) - father timeslot id
+ timeFrom: `20182017-04-14T08:21:45.484+0000` (string, required) - ISO date-time di inizio timeSlot. Se dayOfWeek valorizzato considerare solo la parte time
+ timeTo: `2017-04-14T08:21:45.484+0000` (string, required) - ISO date-time di fine timeSlot. Se dayOfWeek valorizzato considerare solo la parte time
+ exception: campo inutilizzabile per maltempo (string) - eventuale eccezione sullo slot
+ shortName: primo (string, required) - short name dello slot
+ text: `Fiorentina-Roma` (string, optional) - descrizione del timeSlot
+ pic: `37adab3a-c008-4fc1-9e72-cb28383a31d5.jpeg` (string, required) - uuid ad immagine


### ServiceGenericSummaryRes
+ id: 123 (number, required) - identificatore del servizio
+ shortName: SOS (string, required) - nome del servizio
+ pic: `polizia` (string, required) - uuid immagine (icona) rappresentante il servizio
+ text: Chiamate di emergenza (string, optional) - descrizione del servizio
+ isActive: true (boolean, required) - se il servizio è attivo (operativo o meno)
+ isGeneric: true (boolean, required) - se il servizio è generico
+ category: HELP (string, required) tipologia di servizio. Nota bene: un aiuto è da intendersi come un servizio di una 
particolare categoria (*HELP*). Dunque il tapping sull'icona aiuto dovrà chiamare questo servizio
con `category:help`. 

### ServiceGenericSummaryRes1
+ id: 124 (number, required) - identificatore del servizio
+ shortName: SOS (string, required) - nome del servizio
+ pic: `vigili_fuoco` (string, required) - uuid immagine (icona) rappresentante il servizio
+ text: Chiamate di emergenza (string, optional) - descrizione del servizio
+ isActive: true (boolean, required) - se il servizio è attivo (operativo o meno)
+ isGeneric: true (boolean, required) - se il servizio è generico
+ category: HELP (string, required) tipologia di servizio

### ServiceSummaryRes
+ id: 456 (number, required) - identificatore del servizio
+ shortName: Punto di ristoro (string, required) - nome del servizio
+ pic: `caffe` (string, required) - uuid immagine (icona) rappresentante il servizio
+ text: Caffè, tavola calda (string, optional) - descrizione del servizio
+ isActive: true (boolean, required) - se il servizio è attivo (operativo o meno)
+ isGeneric: false (boolean, required) - se il servizio è generico
+ category: FOOD (string, required) tipologia di servizio

### ServiceSummaryRes1
+ id: 457 (number, required) - identificatore del servizio
+ shortName: Distributore automatico (string, required) - nome del servizio
+ pic: `distributore_auto` (string, required) - uuid immagine (icona) rappresentante il servizio
+ text: Distributore automaticoServices (string, optional) - descrizione del servizio
+ isActive: true (boolean, required) - se il servizio è attivo (operativo o meno)
+ isGeneric: false (boolean, required) - se il servizio è generico
+ category: MOBILITY (string, required) tipologia di servizio

### ServiceSummaryRes2
+ id: 458 (number, required) - identificatore del servizio
+ shortName: Servizio di vigilanza (string, required) - nome del servizio
+ pic: `vigilanza` (string, required) - uuid immagine (icona) rappresentante il servizio
+ text: Servizio di vigilanza descrizione (string, optional) - descrizione del servizio
+ isActive: true (boolean, required) - se il servizio è attivo (operativo o meno)
+ isGeneric: false (boolean, required) - se il servizio è generico
+ category: SECURITY (string, required) tipologia di servizio

### ServiceDetailRes
+ id: 87654321 (number, required) - identificatore del servizio
+ shortName: Punto di ristoro (string, required) - nome del servizio
+ pic: `caffe` (string, required) - icona rappresentante il servizio. E' un id, non indicare l'estensione.
+ text: Caffè, tavola calda (string, optional) - descrizione del servizio
+ isActive: true (boolean, required) - se il servizio è attivo (operativo o meno)
+ isGeneric: false (boolean, required) - se il servizio è generico
+ category: FOOD (string, required) - categoria di appartenenza del servizio
+ agendaId: 12432543 (number, optional) - idenitficatore del calendario riferito al servizio
+ action: (ActionRes)
+ privacyId: 10 (number, required) - privacy richiesta per il servizio
Services

### ActionRes
+ shortName: Carabinieri (string, required) - nome del servizio
+ command: tel (string, required) comando eseguito, tipo di action
+ data: 
    + phone: 987 (string, required) dati associati al comando 


### PoiServiceRes
+ id: 1 (number, required) - id Point Of Interest
+ shortName: Cassa 1 (string, required) - nome POI
+ text: Cassa ingresso 1 (string, optional) - descrizione del POI
+ latitude: 23.2 (number, required) - latitudine
+ longitude: 635.2 (number, required) - longitudine
+ level: 2 (number, required) - piano 
+ isAccessible: true (boolean) - accessibilità per invalidi
+ isActive: true (boolean, required) - stato del POI (operativo o meno)
+ creationTS: `2018-11-05T19:04:15.735+0000` (string, required) - data di creazione del POI
+ poiType: 1232 (number, required) - tipologia di POI

### PoiServiceRes1
+ id: 2 (number, required) - id Point Of Interest
+ shortName: Cassa 2 (string, required) - nome POI
+ text: Cassa ingresso 2 (string, optional) - descrizione del POI
+ latitude: 23.2 (number, required) - latitudine
+ longitude: 635.2 (number, required) - longitudine
+ level: 2 (number, required) - piano 
+ isAccessible: true (boolean) - accessibilità per invalidi
+ isActive: true (boolean, required) - stato del POI (operativo o meno)
+ creationTS: `2018-11-05T19:04:15.735+0000` (string, required) - data di creazione del POI
+ poiType: 1232 (number, required) - tipologia di POI

### UserFacility
+ facilityId: (FacilityRes, required) - identificatore facility
+ userId : mario.rossi@utente.it (string, required) - id utente

### UsersInEventRes
+ username: g.tassoni@quidinfo.it (string, required) - identificativo utente
+ firstname: giovanni (string, required) - nome utente partecipante
+ lastname: tassoni (string, required) - cognome utente partecipante
+ pic: `06d7767b-81ae-480b-849b-0340f9ae1918.jpeg` (string, optional) - uuid immagine utente


### UsersFriendsInEventRes
+ user(UsersInEventRes)
+ isFriend: true (boolean,required) - booleano che mi dice se l'utente che partecipa è mio amico 
+ affinity: 75 (number, required) - percentuale affinità 

### NewsRes
+ id: 2 (number, required) - id news
+ shortName: Blocco uscita via Panciatichi (string, required) Titolo
+ text: a causa di interventi stradali (string, optional) Sottotitolo
+ pic: `06d7767b-81ae-480b-849b-0340f9ae1918.jpeg` (string, required) - uuid ad immagine news
+ body: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus fringilla nunc id elementum volutpat. Maecenas at mauris a lorem placerat tincidunt nec id orci. Cras dolor ligula, feugiat sed gravida iaculis, blandit et turpis. Vivamus id rhoncus lorem, id commodo leo. Praesent ornare pretium tortor ac auctor. Phasellus sagittis, massa in mattis tincidunt, massa metus ullamcorper diam, malesuada dapibus magna mauris et enim. Praesent mi quam, volutpat id consectetur sit amet, ullamcorper non ex. Duis dignissim quis ipsum ut pellentesque. Fusce consequat eros vitae erat lobortis elementum. (string, required) Corpo
+ category: (enum[string], required) - categoria
    + Members
        + `DENY`News
        + `MUSICA_CLASSICA`
        + `MUSICA_ROCK`

### NewsRes1
+ id: 3 (number, required) - id news
+ shortName: Estensione temporanea area pedonale di via Cavour (string, required) Titolo
+ text: Estensione temporanea dell’area pedonale di via Cavour alla piazza Ricca in occasione delle festività natalizie e di capodanno (string, optional) Sottotitolo
+ pic: `06d7767b-81ae-480b-849b-0XXXXXae1918.jpeg` (string, required) - uuid ad immagine news
+ body: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus fringilla nunc id elementum volutpat. Maecenas at mauris a lorem placerat tincidunt nec id orci. Cras dolor ligula, feugiat sed gravida iaculis, blandit et turpis. Vivamus id rhoncus lorem, id commodo leo. Praesent ornare pretium tortor ac auctor. Phasellus sagittis, massa in mattis tincidunt, massa metus ullamcorper diam, malesuada dapibus magna mauris et enim. Praesent mi quam, volutpat id consectetur sit amet, ullamcorper non ex. Duis dignissim quis ipsum ut pellentesque. Fusce consequat eros vitae erat lobortis elementum. (string, required) Corpo
+ category: (enum[string], required) - categoria
    + Members
        + `DENY`

### ToKnow
+ id: 37827387 (string, required) - id della info utile 
+ shortName: ingresso principale aperto (string, required) - 
+ text: apertura ingresso principale (string, optional) - descrizione info da sapere
+ pic: `9f4d310e-4b09-4745-a603-b1f0c83d292f.png` (string, required) - immagine icona di riferimento per la info
+ creationTS: `2018-09-01T10:22:43.235+0000` (string, required) - data generazione della info


### MessagesRes
+ codice: string, required
+ testo: string, required

### SocialNameReq


### CE230Error
- metadata (object)
  - messages (array[230ErrorMessage]) - Lista di messaggi 

### 230ErrorMessage
+ message: Errore validazione input (string, required) - descrizione messaggio
+ title: Validazione input (string, required) - Nome messaggio
+ type: ERROR (string, required) - Tipologia del messaggio
+ target: Modal (string, required) - Tipologia di rappresentazione del messaggio
+ errorCode: 230 (number, required) - Codice di errore

### CEServerError
- metadata (object)
  - messages (array[ServerErrorMessage]) - Lista di messaggi 

### ServerErrorMessage

+ message: GENERAL_ERROR (string, required) - descrizione messaggio
+ title: Errore (string, required) - Nome messaggio
+ type: error (string, required) - Tipologia del messaggio
+ target: Modal (string, required) - Tipologia di rappresentazione del messaggio
+ errorCode: -1 (number, required) - Codice di errore